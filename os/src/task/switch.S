.altmacro
.macro SAVE_SN n
    sd s\n, (\n+2)*8(a0)
.endm

.macro LOAD_SN n
    ld s\n, (\n+2)*8(a1)
.endm
    .section .text
    .globl __switch

# TaskContext layout (example):
#  offset 0: return address (ra)
#  offset 8: stack pointer (sp)
#  offset 16 ~ 104: saved registers s0 ~ s11

# STEP [1]
    # __switch(
    #     current_task_cx_ptr: *mut TaskContext,
    #     next_task_cx_ptr: *const TaskContext
    # )
__switch:
    
    # STEP [2]
    # save kernel stack of current task
    sd sp, 8(a0)
    # save ra
    sd ra, 0(a0)
    .set n, 0
    .rept 12
        SAVE_SN %n
        .set n, n+1
    .endr

    # STEP [3]
    # restore ra & s0~s11 of next execution
    ld ra, 0(a1)
    .set n, 0
    .rept 12
        LOAD_SN %n
        .set n, n + 1
    .endr

    
    # Load the stack pointer (sp) for the next task.
    ld sp, 8(a1)
    ret

